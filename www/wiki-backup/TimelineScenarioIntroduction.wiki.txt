== Timeline scenarios==
'''Timeline scenario''' allows combining multiple timeline scenario actors in a parallel, sequential or custom order. 

There are three core types of timeline scenario actors:
* [[TimelineOverview|Timelines]]
* <code>TimelineRunnable</code> which is an extension of [http://java.sun.com/javase/6/docs/api/java/lang/Runnable.html Runnable] 
* [[UIToolkitSupport|Swing-specific]] <code>TimelineSwingWorker</code> class which is an extension of [http://java.sun.com/javase/6/docs/api/javax/swing/SwingWorker.html SwingWorker]. 

Additional types of timeline scenario actors can be added in the application code by implementing the <code>TimelineScenario.TimelineScenarioActor</code> interface.

To create a custom timeline scenario, use the following APIs of the <code>TimelineScenario</code> class:
* <code>public void addScenarioActor(TimelineScenarioActor actor)</code> adds the specified actor
* <code>public void addDependency(TimelineScenarioActor actor, TimelineScenarioActor... waitFor)</code> specifies the dependencies between the actors

== Timeline scenario kinds ==

There are three built-in timeline scenario kinds that address the most common dependencies between the actors:
* <code>Timeline.Parallel</code> runs all the actors in a parallel fashion
* <code>Timeline.Sequence</code> runs the actors one after another in the order they have been added
* <code>Timeline.RendezvousSequence</code> allows simple branch-and-wait ordering. The rendezvous scenario has a stage-like approach. All actors belonging to the same stage run in parallel, while actors in stage N+1 wait for '''all''' actors in stage N to be finished. The <code>RendezvousSequence.rendezvous()</code> marks the end of one stage and the beginning of another.

